name: Test Workflows

on:
  workflow_dispatch:
    inputs:
      workflow_name:
        description: 'Workflow to test'
        required: true
        default: 'ci'
        type: choice
        options:
        - ci
        - quality
        - security
        - performance
        - coverage
        - matrix
        - docs

jobs:
  test-workflow:
    name: Test ${{ inputs.workflow_name }} Workflow
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v6
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -e ".[dev]"

    - name: Test CI workflow
      if: inputs.workflow_name == 'ci'
      run: |
        echo "Testing CI workflow components..."
        python -m pytest --cov=src/pom_reader --cov-report=xml
        python -m ruff check src/ tests/
        python -m mypy src/
        python -m isort --check-only src/ tests/
        python -m black --check src/ tests/

    - name: Test Quality workflow
      if: inputs.workflow_name == 'quality'
      run: |
        echo "Testing Quality workflow components..."
        python -m pytest --cov=src/pom_reader --cov-report=html --cov-report=xml
        pip install pylint flake8 radon
        pylint src/pom_reader/ --output-format=text
        flake8 src/ tests/ --count --select=E9,F63,F7,F82
        radon cc src/ --show-complexity --min B

    - name: Test Security workflow
      if: inputs.workflow_name == 'security'
      run: |
        echo "Testing Security workflow components..."
        pip install bandit safety
        bandit -r src/ -f json -o bandit-report.json
        safety check

    - name: Test Performance workflow
      if: inputs.workflow_name == 'performance'
      run: |
        echo "Testing Performance workflow components..."
        pip install psutil memory-profiler
        python -c "
        import time
        import psutil
        import os
        from pom_reader import PomReader

        process = psutil.Process(os.getpid())
        initial_memory = process.memory_info().rss / 1024 / 1024

        start_time = time.time()
        reader = PomReader()
        pom = reader.parse_file('resources/pom.xml')
        parse_time = time.time() - start_time

        final_memory = process.memory_info().rss / 1024 / 1024
        memory_used = final_memory - initial_memory

        print(f'Parse time: {parse_time:.4f} seconds')
        print(f'Memory usage: {memory_used:.2f} MB')
        print('Performance test passed!')
        "

    - name: Test Coverage workflow
      if: inputs.workflow_name == 'coverage'
      run: |
        echo "Testing Coverage workflow components..."
        python -m pytest --cov=src/pom_reader --cov-report=xml --cov-report=html --cov-fail-under=40

    - name: Test Matrix workflow
      if: inputs.workflow_name == 'matrix'
      run: |
        echo "Testing Matrix workflow components..."
        python -m pytest --cov=src/pom_reader --cov-report=xml
        python -m pom_reader.cli --help
        python -m pom_reader.cli --version
        python -m pom_reader.cli analyze resources/pom.xml --format json > /dev/null

    - name: Test Docs workflow
      if: inputs.workflow_name == 'docs'
      run: |
        echo "Testing Docs workflow components..."
        pip install pydocstyle
        pydocstyle src/pom_reader/ --count
        test -f README.md
        test -s README.md
        echo "Documentation test passed!"

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: workflow-test-results-${{ inputs.workflow_name }}
        path: |
          htmlcov/
          coverage.xml
          bandit-report.json
          *.log
