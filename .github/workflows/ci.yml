name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test on Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -e ".[dev]"

    - name: Run tests
      run: |
        python -m pytest --cov=src/pom_reader --cov-report=xml --cov-report=html

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.10'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    name: Lint code
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -e ".[dev]"

    - name: Run ruff linter
      run: |
        python -m ruff check src/ tests/ --output-format=github

    - name: Run ruff formatter check
      run: |
        python -m ruff format --check src/ tests/

    - name: Run mypy type checker
      run: |
        python -m mypy src/

    - name: Run isort import sorter check
      run: |
        python -m isort --check-only src/ tests/

    - name: Run black formatter check
      run: |
        python -m black --check src/ tests/

  security:
    name: Security scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .

    - name: Run bandit security linter
      run: |
        python -m bandit -r src/ -f json -o bandit-report.json || true

    - name: Upload bandit results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-report
        path: bandit-report.json

  build:
    name: Build package
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        python -m twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  integration-test:
    name: Integration test
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .

    - name: Test CLI help
      run: |
        python -m pom_reader.cli --help

    - name: Test CLI version
      run: |
        python -m pom_reader.cli --version

    - name: Test example script
      run: |
        python example.py

    - name: Test with different log levels
      run: |
        python -m pom_reader.cli --log-level DEBUG analyze resources/pom.xml --format json > /dev/null
        python -m pom_reader.cli --log-level INFO analyze resources/pom.xml --format table > /dev/null
        python -m pom_reader.cli --log-level WARNING analyze resources/pom.xml --format tree > /dev/null

    - name: Test custom log directory
      run: |
        mkdir -p /tmp/test-logs
        python -m pom_reader.cli --log-dir /tmp/test-logs analyze resources/pom.xml --format json > /dev/null
        ls -la /tmp/test-logs/

    - name: Verify log files created
      run: |
        test -f ~/.local/logs/pom-reader/pom-reader.log
        test -f ~/.local/logs/pom-reader/pom-reader-errors.log
        echo "Log files created successfully"

  performance-test:
    name: Performance test
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .

    - name: Performance test with timing
      run: |
        echo "Testing POM parsing performance..."
        time python -m pom_reader.cli analyze resources/pom.xml --format json > /dev/null
        echo "Performance test completed"

    - name: Memory usage test
      run: |
        python -c "
        import psutil
        import os
        from pom_reader import PomReader

        process = psutil.Process(os.getpid())
        initial_memory = process.memory_info().rss / 1024 / 1024

        reader = PomReader()
        pom = reader.parse_file('resources/pom.xml')

        final_memory = process.memory_info().rss / 1024 / 1024
        memory_used = final_memory - initial_memory

        print(f'Initial memory: {initial_memory:.2f} MB')
        print(f'Final memory: {final_memory:.2f} MB')
        print(f'Memory used: {memory_used:.2f} MB')

        # Ensure memory usage is reasonable (less than 50MB)
        assert memory_used < 50, f'Memory usage too high: {memory_used:.2f} MB'
        print('Memory usage test passed')
        "

  all-checks:
    name: All checks passed
    runs-on: ubuntu-latest
    needs: [test, lint, security, build, integration-test, performance-test]
    if: always()

    steps:
    - name: Check all jobs
      run: |
        echo "All CI checks completed!"
        echo "✅ Tests: ${{ needs.test.result }}"
        echo "✅ Lint: ${{ needs.lint.result }}"
        echo "✅ Security: ${{ needs.security.result }}"
        echo "✅ Build: ${{ needs.build.result }}"
        echo "✅ Integration: ${{ needs.integration-test.result }}"
        echo "✅ Performance: ${{ needs.performance-test.result }}"
