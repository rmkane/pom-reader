name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  coverage:
    name: Coverage Report
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .

    - name: Run tests with coverage
      run: |
        python -m pytest --cov=src/pom_reader --cov-report=xml --cov-report=html --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: htmlcov/

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .

    - name: Run pylint
      run: |
        pip install pylint
        pylint src/pom_reader/ --output-format=text --reports=y

    - name: Run flake8
      run: |
        pip install flake8
        flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: Check import sorting
      run: |
        python -m isort --check-only --diff src/ tests/

    - name: Check code formatting
      run: |
        python -m black --check --diff src/ tests/

  complexity:
    name: Code Complexity Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .

    - name: Run radon complexity analysis
      run: |
        pip install radon
        radon cc src/ --show-complexity --min B

    - name: Run radon maintainability index
      run: |
        radon mi src/ --show

    - name: Run radon raw metrics
      run: |
        radon raw src/ --summary

  documentation:
    name: Documentation Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .

    - name: Check docstring coverage
      run: |
        pip install docstring-coverage
        docstring-coverage src/pom_reader/ --fail-under=80

    - name: Check for TODO/FIXME comments
      run: |
        echo "Checking for TODO/FIXME comments..."
        grep -r "TODO\|FIXME" src/ || echo "No TODO/FIXME comments found"

    - name: Validate README
      run: |
        # Check if README exists and has content
        test -f README.md
        test -s README.md
        echo "README.md is valid"

  performance:
    name: Performance Benchmarks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .

    - name: Run performance benchmarks
      run: |
        echo "Running performance benchmarks..."

        # Time the CLI execution
        time python -m pom_reader.cli analyze resources/pom.xml --format json > /dev/null

        # Memory usage test
        python -c "
        import psutil
        import os
        from pom_reader import PomReader

        process = psutil.Process(os.getpid())
        initial_memory = process.memory_info().rss / 1024 / 1024

        reader = PomReader()
        pom = reader.parse_file('resources/pom.xml')

        final_memory = process.memory_info().rss / 1024 / 1024
        memory_used = final_memory - initial_memory

        print(f'Memory usage: {memory_used:.2f} MB')
        assert memory_used < 50, f'Memory usage too high: {memory_used:.2f} MB'
        print('Performance test passed')
        "

    - name: Upload performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-results
        path: |
          performance.log
          memory-usage.log
